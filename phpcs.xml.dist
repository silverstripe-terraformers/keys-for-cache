<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="SilverStripe">
    <description>CodeSniffer ruleset for SilverStripe coding conventions.</description>

	<file>src</file>
	<file>tests</file>

    <rule ref="PSR2">
        <!-- Allow non camel cased method names - some base SS method names are PascalCase or snake_case -->
        <exclude name="PSR1.Methods.CamelCapsMethodName.NotCamelCaps"/>
        <!-- This rule conflicts with Slevomat standards requiring an empty line before closing brace -->
        <exclude name="PSR2.Classes.ClassDeclaration.CloseBraceAfterBody"/>
    </rule>

    <!-- All "use" statements must be used in the code. -->
    <rule ref="./vendor/slevomat/coding-standard/SlevomatCodingStandard/ruleset.xml">
        <!-- We're not punishing folks for adding annotations (even if the method is self documenting) -->
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.UselessAnnotation"/>
        <!-- Late Static Binding is used often in SS -->
        <exclude name="SlevomatCodingStandard.Classes.DisallowLateStaticBindingForConstants"/>
        <!-- Multiline comments is what we use as a standard in SS -->
        <exclude name="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment"/>
        <!-- Write conditions like Yoda, we do not -->
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireYodaComparison.RequiredYodaComparison"/>
        <!-- There are two rules which conflict. NewWithoutParentheses and UselessParentheses. One must be disabled -->
        <!-- We allow new Class(); rather than new Class;-->
        <exclude name="SlevomatCodingStandard.ControlStructures.NewWithoutParentheses"/>
        <!-- Do not require fully qualified class names in annotation -->
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation.NonFullyQualifiedClassName"/>
        <!-- allow private static -->
        <exclude name="SlevomatCodingStandard.Classes.UnusedPrivateElements.UnusedProperty"/>
        <!-- Even if you strictly type, there are other reasons to add a DocComment (EG: to add @codeCoverageIgnore -->
        <exclude name="SlevomatCodingStandard.TypeHints.UselessConstantTypeHintSniff.UselessDocComment"/>
        <!-- Even if you strictly type, there are other reasons to add a DocComment (EG: to add @codeCoverageIgnore -->
        <exclude name="SlevomatCodingStandard.Commenting.UselessFunctionDocComment.UselessDocComment"/>
        <!-- Sometimes need "useless annotation" to add things like @codeCoverageIgnore -->
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.UselessAnnotation"/>
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.UselessAnnotation"/>
        <!-- Whitespace above and below the class doesn't do much -->
        <exclude name="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces.NoEmptyLineAfterOpeningBrace"/>
        <exclude name="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces.NoEmptyLineBeforeClosingBrace"/>
        <exclude name="SlevomatCodingStandard.Namespaces.UseSpacing.IncorrectLinesCountBeforeFirstUse"/>
        <!-- Inline doc comments are fine -->
        <exclude name="SlevomatCodingStandard.PHP.RequireExplicitAssertion.RequiredExplicitAssertion"/>
        <!-- Do not require literal separator for long int values -->
        <exclude name="SlevomatCodingStandard.Numbers.RequireNumericLiteralSeparator"/>
        <!-- Do not require arrow functions (this feature is actually not supported in our version of PHPUnit) -->
        <exclude name="SlevomatCodingStandard.Functions.RequireArrowFunction.RequiredArrowFunction"/>
        <!-- Do not require fully qualified exceptions namespaces like SilverStripe\ORM\ValidationException -->
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedExceptions.NonFullyQualifiedException"/>
        <!-- Do not require function referenced via a fully qualified name -->
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions.NonFullyQualified"/>
        <!-- Allow short ternary operator -->
        <exclude name="SlevomatCodingStandard.ControlStructures.DisallowShortTernaryOperator.DisallowedShortTernaryOperator"/>
        <!-- You are not making me go \PHP_EOL -->
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalConstants.NonFullyQualified"/>
    </rule>
</ruleset>
